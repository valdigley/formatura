#!/bin/bash

# Script de deploy para VPS - Sistema de Gest√£o de Sess√µes Fotogr√°ficas
# Execute este script na sua VPS para fazer o deploy inicial

set -e

echo "üöÄ Iniciando deploy do Sistema de Gest√£o de Sess√µes Fotogr√°ficas..."

# Verificar se est√° executando como root ou com sudo
if [[ $EUID -eq 0 ]]; then
   echo "‚ö†Ô∏è  Executando como root. Recomendamos usar um usu√°rio n√£o-root."
fi

# Verificar se Docker est√° instalado
if ! command -v docker &> /dev/null; then
    echo "üì¶ Docker n√£o est√° instalado. Instalando..."
    curl -fsSL https://get.docker.com -o get-docker.sh
    sh get-docker.sh
    
    # Adicionar usu√°rio atual ao grupo docker se n√£o for root
    if [[ $EUID -ne 0 ]]; then
        sudo usermod -aG docker $USER
        echo "‚úÖ Docker instalado. Fa√ßa logout/login para usar docker sem sudo."
        echo "   Ou execute: newgrp docker"
    fi
    
    rm get-docker.sh
fi

# Verificar se Docker Compose est√° instalado
if ! command -v docker-compose &> /dev/null; then
    echo "üì¶ Docker Compose n√£o est√° instalado. Instalando..."
    
    # Detectar arquitetura
    ARCH=$(uname -m)
    if [[ $ARCH == "x86_64" ]]; then
        ARCH="x86_64"
    elif [[ $ARCH == "aarch64" ]]; then
        ARCH="aarch64"
    else
        echo "‚ùå Arquitetura n√£o suportada: $ARCH"
        exit 1
    fi
    
    sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-linux-$ARCH" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
    echo "‚úÖ Docker Compose instalado."
fi

# Definir diret√≥rio do projeto
PROJECT_DIR="/opt/foto-formatura"
echo "üìÅ Configurando projeto em: $PROJECT_DIR"

# Criar diret√≥rio do projeto se n√£o existir
if [ ! -d "$PROJECT_DIR" ]; then
    echo "üìÅ Criando diret√≥rio do projeto..."
    sudo mkdir -p $PROJECT_DIR
    sudo chown $USER:$USER $PROJECT_DIR
fi

# Copiar arquivos para o diret√≥rio do projeto se estivermos em outro local
CURRENT_DIR=$(pwd)
if [ "$CURRENT_DIR" != "$PROJECT_DIR" ]; then
    echo "üìã Copiando arquivos para $PROJECT_DIR..."
    sudo cp -r . $PROJECT_DIR/
    sudo chown -R $USER:$USER $PROJECT_DIR
fi

cd $PROJECT_DIR

# Verificar se arquivo .env existe
if [ ! -f ".env" ]; then
    echo "‚ö†Ô∏è  Arquivo .env n√£o encontrado. Criando template..."
    cat > .env << EOF
# Configura√ß√µes do Supabase
VITE_SUPABASE_URL=https://seu-projeto.supabase.co
VITE_SUPABASE_ANON_KEY=sua-chave-anonima

# Configura√ß√µes do ambiente
NODE_ENV=production

# Configura√ß√µes do dom√≠nio (opcional)
DOMAIN=seu-dominio.com
EMAIL=seu-email@exemplo.com
EOF
    echo "üìù Arquivo .env criado. EDITE-O com suas configura√ß√µes antes de continuar!"
    echo "   Arquivo localizado em: $PROJECT_DIR/.env"
    echo ""
    echo "üîß Para editar: nano $PROJECT_DIR/.env"
    echo ""
    echo "‚ö†Ô∏è  IMPORTANTE: Configure o .env antes de continuar!"
    exit 1
fi

# Verificar se as vari√°veis essenciais est√£o configuradas
source .env
if [[ -z "$VITE_SUPABASE_URL" || "$VITE_SUPABASE_URL" == "https://seu-projeto.supabase.co" ]]; then
    echo "‚ùå Configure o VITE_SUPABASE_URL no arquivo .env primeiro!"
    echo "   Edite: nano $PROJECT_DIR/.env"
    exit 1
fi

if [[ -z "$VITE_SUPABASE_ANON_KEY" || "$VITE_SUPABASE_ANON_KEY" == "sua-chave-anonima" ]]; then
    echo "‚ùå Configure o VITE_SUPABASE_ANON_KEY no arquivo .env primeiro!"
    echo "   Edite: nano $PROJECT_DIR/.env"
    exit 1
fi

echo "‚úÖ Configura√ß√µes do .env validadas"

# Parar containers existentes se houver
echo "üõë Parando containers existentes..."
docker-compose down 2>/dev/null || true

# Verificar se node_modules existe, se n√£o, instalar depend√™ncias
if [ ! -d "node_modules" ]; then
    echo "üì¶ Instalando depend√™ncias..."
    
    # Verificar se Node.js est√° instalado para build local
    if command -v node &> /dev/null; then
        npm install
        echo "üèóÔ∏è  Fazendo build da aplica√ß√£o..."
        npm run build
    else
        echo "üì¶ Node.js n√£o encontrado localmente. Build ser√° feito no Docker."
    fi
else
    echo "üì¶ Depend√™ncias j√° instaladas. Fazendo build..."
    if command -v node &> /dev/null; then
        npm run build
    fi
fi

# Criar diret√≥rios necess√°rios
mkdir -p logs
mkdir -p /opt/backups/foto-formatura

echo "üê≥ Iniciando containers Docker..."
docker-compose up -d --build

# Aguardar containers iniciarem
echo "‚è≥ Aguardando containers iniciarem..."
sleep 10

echo "üîç Verificando status dos containers..."
docker-compose ps

# Verificar se a aplica√ß√£o est√° respondendo
echo "üåê Testando aplica√ß√£o..."
sleep 5

if curl -f http://localhost/health &>/dev/null; then
    echo "‚úÖ Aplica√ß√£o est√° respondendo!"
elif curl -f http://localhost/ &>/dev/null; then
    echo "‚úÖ Aplica√ß√£o est√° funcionando!"
else
    echo "‚ö†Ô∏è  Aplica√ß√£o pode n√£o estar respondendo ainda. Verificando logs..."
    docker-compose logs --tail=20
fi

echo ""
echo "‚úÖ Deploy conclu√≠do com sucesso!"
echo ""
echo "üìã INFORMA√á√ïES DO DEPLOY:"
echo "- Aplica√ß√£o: http://$(curl -s ifconfig.me || echo 'seu-ip')"
echo "- Diret√≥rio: $PROJECT_DIR"
echo "- Logs: docker-compose logs -f"
echo ""
echo "üìã PR√ìXIMOS PASSOS:"
echo "1. Teste a aplica√ß√£o: http://$(curl -s ifconfig.me || echo 'seu-ip')"
echo "2. Configure SSL com Let's Encrypt (opcional):"
echo "   sudo apt install certbot python3-certbot-nginx"
echo "   sudo certbot --nginx -d seu-dominio.com"
echo "3. Configure firewall se necess√°rio:"
echo "   sudo ufw allow 80"
echo "   sudo ufw allow 443"
echo "   sudo ufw allow ssh"
echo ""
echo "üìä COMANDOS √öTEIS:"
echo "- Ver logs: docker-compose logs -f"
echo "- Reiniciar: docker-compose restart"
echo "- Parar: docker-compose down"
echo "- Atualizar: ./update-vps.sh"
echo ""
echo "üîß CONFIGURA√á√ÉO:"
echo "- Configure o Supabase no sistema ap√≥s o primeiro login"
echo "- Configure WhatsApp e Mercado Pago nas configura√ß√µes"
echo "- Teste o envio de contratos e pagamentos"